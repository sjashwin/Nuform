/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface SimpleAuctionInterface extends utils.Interface {
  functions: {
    "getBid(string)": FunctionFragment;
    "listings(string)": FunctionFragment;
    "setBid(string,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getBid" | "listings" | "setBid"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBid",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBid",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "getBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBid", data: BytesLike): Result;

  events: {
    "NumberSet(string,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NumberSet"): EventFragment;
}

export interface NumberSetEventObject {
  listingId: string;
  number: BigNumber;
  addedBy: string;
}
export type NumberSetEvent = TypedEvent<
  [string, BigNumber, string],
  NumberSetEventObject
>;

export type NumberSetEventFilter = TypedEventFilter<NumberSetEvent>;

export interface SimpleAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleAuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBid(
      _listingId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { number: BigNumber; addedBy: string }>;

    listings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { number: BigNumber; addedBy: string }>;

    setBid(
      _listingId: PromiseOrValue<string>,
      _number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getBid(
    _listingId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { number: BigNumber; addedBy: string }>;

  listings(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { number: BigNumber; addedBy: string }>;

  setBid(
    _listingId: PromiseOrValue<string>,
    _number: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBid(
      _listingId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { number: BigNumber; addedBy: string }>;

    listings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { number: BigNumber; addedBy: string }>;

    setBid(
      _listingId: PromiseOrValue<string>,
      _number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NumberSet(string,uint256,address)"(
      listingId?: PromiseOrValue<string> | null,
      number?: null,
      addedBy?: PromiseOrValue<string> | null
    ): NumberSetEventFilter;
    NumberSet(
      listingId?: PromiseOrValue<string> | null,
      number?: null,
      addedBy?: PromiseOrValue<string> | null
    ): NumberSetEventFilter;
  };

  estimateGas: {
    getBid(
      _listingId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBid(
      _listingId: PromiseOrValue<string>,
      _number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBid(
      _listingId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBid(
      _listingId: PromiseOrValue<string>,
      _number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
