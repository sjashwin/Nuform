/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Auction, AuctionInterface } from "../Auction";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_biddingTime",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "_beneficiary",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "AuctionEnded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "bidder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "HighestBidIncreased",
    type: "event",
  },
  {
    inputs: [],
    name: "auctionEnd",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "auctionEndTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "beneficiary",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bid",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "highestBid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "highestBidder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000b9438038062000b94833981810160405281019062000037919062000138565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508142620000859190620001ae565b6001819055505050620001e9565b600080fd5b6000819050919050565b620000ad8162000098565b8114620000b957600080fd5b50565b600081519050620000cd81620000a2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010082620000d3565b9050919050565b6200011281620000f3565b81146200011e57600080fd5b50565b600081519050620001328162000107565b92915050565b6000806040838503121562000152576200015162000093565b5b60006200016285828601620000bc565b9250506020620001758582860162000121565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620001bb8262000098565b9150620001c88362000098565b9250828201905080821115620001e357620001e26200017f565b5b92915050565b61099b80620001f96000396000f3fe6080604052600436106100705760003560e01c80633ccfd60b1161004e5780633ccfd60b146100c15780634b449cba146100ec57806391f9015714610117578063d57bde791461014257610070565b80631998aeef146100755780632a24f46c1461007f57806338af3eed14610096575b600080fd5b61007d61016d565b005b34801561008b57600080fd5b506100946102fe565b005b3480156100a257600080fd5b506100ab610476565b6040516100b89190610631565b60405180910390f35b3480156100cd57600080fd5b506100d661049a565b6040516100e39190610667565b60405180910390f35b3480156100f857600080fd5b506101016105be565b60405161010e919061069b565b60405180910390f35b34801561012357600080fd5b5061012c6105c4565b60405161013991906106d7565b60405180910390f35b34801561014e57600080fd5b506101576105ea565b604051610164919061069b565b60405180910390f35b6001544211156101b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a99061074f565b60405180910390fd5b60035434116101f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed906107bb565b60405180910390fd5b60006003541461027b5760035460046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610273919061080a565b925050819055505b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346003819055507ff4757a49b326036464bec6fe419a4ae38c8a02ce3e68bf0809674f6aab8ad30033346040516102f492919061083e565b60405180910390a1565b600154421015610343576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033a906108b3565b60405180910390fd5b600560009054906101000a900460ff1615610393576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038a90610945565b60405180910390fd5b6001600560006101000a81548160ff0219169083151502179055507fdaec4582d5d9595688c8c98545fdd1c696d41c6aeaeb636737e84ed2f5c00eda600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660035460405161040392919061083e565b60405180910390a160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6003549081150290604051600060405180830381858888f19350505050158015610473573d6000803e3d6000fd5b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111156105b5576000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050506105b45780600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060009150506105bb565b5b60019150505b90565b60015481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061061b826105f0565b9050919050565b61062b81610610565b82525050565b60006020820190506106466000830184610622565b92915050565b60008115159050919050565b6106618161064c565b82525050565b600060208201905061067c6000830184610658565b92915050565b6000819050919050565b61069581610682565b82525050565b60006020820190506106b0600083018461068c565b92915050565b60006106c1826105f0565b9050919050565b6106d1816106b6565b82525050565b60006020820190506106ec60008301846106c8565b92915050565b600082825260208201905092915050565b7f41756374696f6e20616c726561647920656e6465642e00000000000000000000600082015250565b60006107396016836106f2565b915061074482610703565b602082019050919050565b600060208201905081810360008301526107688161072c565b9050919050565b7f546865726520616c7265616479206973206120686967686572206269642e0000600082015250565b60006107a5601e836106f2565b91506107b08261076f565b602082019050919050565b600060208201905081810360008301526107d481610798565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061081582610682565b915061082083610682565b9250828201905080821115610838576108376107db565b5b92915050565b600060408201905061085360008301856106c8565b610860602083018461068c565b9392505050565b7f41756374696f6e206e6f742079657420656e6465642e00000000000000000000600082015250565b600061089d6016836106f2565b91506108a882610867565b602082019050919050565b600060208201905081810360008301526108cc81610890565b9050919050565b7f61756374696f6e456e642068617320616c7265616479206265656e2063616c6c60008201527f65642e0000000000000000000000000000000000000000000000000000000000602082015250565b600061092f6023836106f2565b915061093a826108d3565b604082019050919050565b6000602082019050818103600083015261095e81610922565b905091905056fea264697066735822122067b81d335eb85edb1d9502990fa74cbc4b9ea7755fc13d699b72a6fe5699687f64736f6c63430008120033";

type AuctionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuctionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Auction__factory extends ContractFactory {
  constructor(...args: AuctionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _biddingTime: PromiseOrValue<BigNumberish>,
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Auction> {
    return super.deploy(
      _biddingTime,
      _beneficiary,
      overrides || {}
    ) as Promise<Auction>;
  }
  override getDeployTransaction(
    _biddingTime: PromiseOrValue<BigNumberish>,
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _biddingTime,
      _beneficiary,
      overrides || {}
    );
  }
  override attach(address: string): Auction {
    return super.attach(address) as Auction;
  }
  override connect(signer: Signer): Auction__factory {
    return super.connect(signer) as Auction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuctionInterface {
    return new utils.Interface(_abi) as AuctionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Auction {
    return new Contract(address, _abi, signerOrProvider) as Auction;
  }
}
